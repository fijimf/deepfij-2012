[main]
credentialsMatcher = org.apache.shiro.authc.credential.SimpleCredentialsMatcher
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = select user_password,user_salt_passwd from mcuser where user_name = ?
jdbcRealm.userRolesQuery = select role_name from users_roles where user_name = ?
jdbcRealm.permissionsQuery = select permission_name from role_permissions where role_name = ?

ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = root
ds.password = mutombo
ds.databaseName = deepfijdb
jdbcRealm.dataSource = $ds
jdbcRealm.credentialsMatcher = $credentialsMatcher



# replace form authentication filter with verbose filter
authc = org.meri.simpleshirosecuredapplication.servlet.VerboseFormAuthenticationFilter
# request parameter with login error information; if not present filter assumes 'shiroLoginFailure'
authc.failureKeyAttribute=simpleShiroApplicationLoginFailure
# specify login page
authc.loginUrl = /simpleshirosecuredapplication/account/login.jsp
# name of request parameter with username; if not present filter assumes 'username'
authc.usernameParam = user
# name of request parameter with password; if not present filter assumes 'password'
authc.passwordParam = pass
# does the user wish to be remembered?; if not present filter assumes 'rememberMe'
authc.rememberMeParam = remember
# redirect after successful login
authc.successUrl  = /simpleshirosecuredapplication/account/personalaccountpage.jsp

# roles filter: redirect to error page if user does not have access rights
[users]
# The 'users' section is for simple deployments when you only need a small number of
# statically-defined set of User accounts.

[roles]
# The 'roles' section is for simple deployments when you only need a small number of
# statically-defined roles.
